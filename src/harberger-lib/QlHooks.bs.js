// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as BnJs from "bn.js";
import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Moment from "moment";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Js_math from "bs-platform/lib/es6/js_math.js";
import * as MomentRe from "bs-moment/src/MomentRe.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Eth$WildCards from "./Eth.bs.js";
import * as Globals$WildCards from "./Globals.bs.js";
import * as TokenId$WildCards from "./TokenId.bs.js";
import * as ApolloHooks$ReasonApolloHooks from "@wildcards/reason-apollo-hooks/src/ApolloHooks.bs.js";

function tokenIdToAnimal(tokenIdJson) {
  return Belt_Option.getWithDefault(TokenId$WildCards.make(Belt_Option.mapWithDefault(Js_json.decodeString(tokenIdJson), "0", (function (a) {
                        return a;
                      }))), TokenId$WildCards.makeFromInt(0));
}

function decodePrice(price) {
  return Eth$WildCards.makeWithDefault(Belt_Option.mapWithDefault(Js_json.decodeString(price), "0", (function (a) {
                    return a;
                  })), 0);
}

function decodeMoment(price) {
  return MomentRe.momentWithUnix(Belt_Option.mapWithDefault(Js_json.decodeString(price), 0, Caml_format.caml_int_of_string));
}

function decodeBN(number) {
  return new BnJs.default(Belt_Option.mapWithDefault(Js_json.decodeString(number), "0", (function (a) {
                    return a;
                  })));
}

function decodeAddress(address) {
  return Belt_Option.mapWithDefault(Js_json.decodeString(address), "0x0", (function (a) {
                return a;
              }));
}

var ppx_printed_query = "query   {\nwildcards(first: 14)  {\nid  \nanimal: tokenId  \nowner  {\naddress  \nid  \n}\n\nprice  {\nprice  \nid  \n}\n\ntotalCollected  \ntimeCollected  \npatronageNumeratorPriceScaled  \ntimeAcquired  \n}\n\nglobal(id: 1)  {\nid  \ntotalCollectedOrDueAccurate  \ntimeLastCollected  \ntotalTokenCostScaledNumeratorAccurate  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "wildcards");
  var value$3 = Js_dict.get(value$1, "global");
  var tmp;
  if (value$3 !== undefined) {
    var value$4 = Caml_option.valFromOption(value$3);
    var match = Js_json.decodeNull(value$4);
    if (match !== undefined) {
      tmp = undefined;
    } else {
      var value$5 = Js_option.getExn(Js_json.decodeObject(value$4));
      var value$6 = Js_dict.get(value$5, "id");
      var tmp$1;
      if (value$6 !== undefined) {
        var value$7 = Caml_option.valFromOption(value$6);
        var value$8 = Js_json.decodeString(value$7);
        tmp$1 = value$8 !== undefined ? value$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Global is missing");
      }
      var value$9 = Js_dict.get(value$5, "totalCollectedOrDueAccurate");
      var value$10 = Js_dict.get(value$5, "timeLastCollected");
      var value$11 = Js_dict.get(value$5, "totalTokenCostScaledNumeratorAccurate");
      tmp = {
        id: tmp$1,
        totalCollectedOrDueAccurate: value$9 !== undefined ? decodeBN(Caml_option.valFromOption(value$9)) : Js_exn.raiseError("graphql_ppx: Field totalCollectedOrDueAccurate on type Global is missing"),
        timeLastCollected: value$10 !== undefined ? decodeBN(Caml_option.valFromOption(value$10)) : Js_exn.raiseError("graphql_ppx: Field timeLastCollected on type Global is missing"),
        totalTokenCostScaledNumeratorAccurate: value$11 !== undefined ? decodeBN(Caml_option.valFromOption(value$11)) : Js_exn.raiseError("graphql_ppx: Field totalTokenCostScaledNumeratorAccurate on type Global is missing")
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          wildcards: value$2 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(value$2))).map((function (value) {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var value$2 = Js_dict.get(value$1, "id");
                    var tmp;
                    if (value$2 !== undefined) {
                      var value$3 = Caml_option.valFromOption(value$2);
                      var value$4 = Js_json.decodeString(value$3);
                      tmp = value$4 !== undefined ? value$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type Wildcard is missing");
                    }
                    var value$5 = Js_dict.get(value$1, "animal");
                    var value$6 = Js_dict.get(value$1, "owner");
                    var tmp$1;
                    if (value$6 !== undefined) {
                      var value$7 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(value$6)));
                      var value$8 = Js_dict.get(value$7, "address");
                      var value$9 = Js_dict.get(value$7, "id");
                      var tmp$2;
                      if (value$9 !== undefined) {
                        var value$10 = Caml_option.valFromOption(value$9);
                        var value$11 = Js_json.decodeString(value$10);
                        tmp$2 = value$11 !== undefined ? value$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
                      } else {
                        tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type Patron is missing");
                      }
                      tmp$1 = {
                        address: value$8 !== undefined ? Caml_option.valFromOption(value$8) : Js_exn.raiseError("graphql_ppx: Field address on type Patron is missing"),
                        id: tmp$2
                      };
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field owner on type Wildcard is missing");
                    }
                    var value$12 = Js_dict.get(value$1, "price");
                    var tmp$3;
                    if (value$12 !== undefined) {
                      var value$13 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(value$12)));
                      var value$14 = Js_dict.get(value$13, "price");
                      var value$15 = Js_dict.get(value$13, "id");
                      var tmp$4;
                      if (value$15 !== undefined) {
                        var value$16 = Caml_option.valFromOption(value$15);
                        var value$17 = Js_json.decodeString(value$16);
                        tmp$4 = value$17 !== undefined ? value$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$16));
                      } else {
                        tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type Price is missing");
                      }
                      tmp$3 = {
                        price: value$14 !== undefined ? decodePrice(Caml_option.valFromOption(value$14)) : Js_exn.raiseError("graphql_ppx: Field price on type Price is missing"),
                        id: tmp$4
                      };
                    } else {
                      tmp$3 = Js_exn.raiseError("graphql_ppx: Field price on type Wildcard is missing");
                    }
                    var value$18 = Js_dict.get(value$1, "totalCollected");
                    var value$19 = Js_dict.get(value$1, "timeCollected");
                    var value$20 = Js_dict.get(value$1, "patronageNumeratorPriceScaled");
                    var value$21 = Js_dict.get(value$1, "timeAcquired");
                    return {
                            id: tmp,
                            animal: value$5 !== undefined ? tokenIdToAnimal(Caml_option.valFromOption(value$5)) : Js_exn.raiseError("graphql_ppx: Field animal on type Wildcard is missing"),
                            owner: tmp$1,
                            price: tmp$3,
                            totalCollected: value$18 !== undefined ? decodePrice(Caml_option.valFromOption(value$18)) : Js_exn.raiseError("graphql_ppx: Field totalCollected on type Wildcard is missing"),
                            timeCollected: value$19 !== undefined ? decodeBN(Caml_option.valFromOption(value$19)) : Js_exn.raiseError("graphql_ppx: Field timeCollected on type Wildcard is missing"),
                            patronageNumeratorPriceScaled: value$20 !== undefined ? decodeBN(Caml_option.valFromOption(value$20)) : Js_exn.raiseError("graphql_ppx: Field patronageNumeratorPriceScaled on type Wildcard is missing"),
                            timeAcquired: value$21 !== undefined ? decodeMoment(Caml_option.valFromOption(value$21)) : Js_exn.raiseError("graphql_ppx: Field timeAcquired on type Wildcard is missing")
                          };
                  })) : Js_exn.raiseError("graphql_ppx: Field wildcards on type Query is missing"),
          global: tmp
        };
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeVariables(param) {
  return null;
}

function definition_002(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var InitialLoad = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function useInitialDataLoad(param) {
  var match = ApolloHooks$ReasonApolloHooks.useQuery(undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, definition);
  var simple = match[0];
  if (typeof simple === "number" || simple.tag) {
    return ;
  } else {
    return Caml_option.some(simple[0]);
  }
}

var ppx_printed_query$1 = "query ($tokenId: String!)  {\nwildcard(id: $tokenId)  {\nid  \nanimal: tokenId  \ntimeAcquired  \ntotalCollected  \npatronageNumerator  \npatronageNumeratorPriceScaled  \ntimeCollected  \nprice  {\nid  \nprice  \n}\n\nowner  {\naddress  \nid  \n}\n\n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "wildcard");
  var tmp;
  if (value$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(value$2);
    var match = Js_json.decodeNull(value$3);
    if (match !== undefined) {
      tmp = undefined;
    } else {
      var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
      var value$5 = Js_dict.get(value$4, "id");
      var tmp$1;
      if (value$5 !== undefined) {
        var value$6 = Caml_option.valFromOption(value$5);
        var value$7 = Js_json.decodeString(value$6);
        tmp$1 = value$7 !== undefined ? value$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Wildcard is missing");
      }
      var value$8 = Js_dict.get(value$4, "animal");
      var value$9 = Js_dict.get(value$4, "timeAcquired");
      var value$10 = Js_dict.get(value$4, "totalCollected");
      var value$11 = Js_dict.get(value$4, "patronageNumerator");
      var value$12 = Js_dict.get(value$4, "patronageNumeratorPriceScaled");
      var value$13 = Js_dict.get(value$4, "timeCollected");
      var value$14 = Js_dict.get(value$4, "price");
      var tmp$2;
      if (value$14 !== undefined) {
        var value$15 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(value$14)));
        var value$16 = Js_dict.get(value$15, "id");
        var tmp$3;
        if (value$16 !== undefined) {
          var value$17 = Caml_option.valFromOption(value$16);
          var value$18 = Js_json.decodeString(value$17);
          tmp$3 = value$18 !== undefined ? value$18 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$17));
        } else {
          tmp$3 = Js_exn.raiseError("graphql_ppx: Field id on type Price is missing");
        }
        var value$19 = Js_dict.get(value$15, "price");
        tmp$2 = {
          id: tmp$3,
          price: value$19 !== undefined ? decodePrice(Caml_option.valFromOption(value$19)) : Js_exn.raiseError("graphql_ppx: Field price on type Price is missing")
        };
      } else {
        tmp$2 = Js_exn.raiseError("graphql_ppx: Field price on type Wildcard is missing");
      }
      var value$20 = Js_dict.get(value$4, "owner");
      var tmp$4;
      if (value$20 !== undefined) {
        var value$21 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(value$20)));
        var value$22 = Js_dict.get(value$21, "address");
        var value$23 = Js_dict.get(value$21, "id");
        var tmp$5;
        if (value$23 !== undefined) {
          var value$24 = Caml_option.valFromOption(value$23);
          var value$25 = Js_json.decodeString(value$24);
          tmp$5 = value$25 !== undefined ? value$25 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$24));
        } else {
          tmp$5 = Js_exn.raiseError("graphql_ppx: Field id on type Patron is missing");
        }
        tmp$4 = {
          address: value$22 !== undefined ? decodeAddress(Caml_option.valFromOption(value$22)) : Js_exn.raiseError("graphql_ppx: Field address on type Patron is missing"),
          id: tmp$5
        };
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field owner on type Wildcard is missing");
      }
      tmp = {
        id: tmp$1,
        animal: value$8 !== undefined ? tokenIdToAnimal(Caml_option.valFromOption(value$8)) : Js_exn.raiseError("graphql_ppx: Field animal on type Wildcard is missing"),
        timeAcquired: value$9 !== undefined ? decodeMoment(Caml_option.valFromOption(value$9)) : Js_exn.raiseError("graphql_ppx: Field timeAcquired on type Wildcard is missing"),
        totalCollected: value$10 !== undefined ? decodePrice(Caml_option.valFromOption(value$10)) : Js_exn.raiseError("graphql_ppx: Field totalCollected on type Wildcard is missing"),
        patronageNumerator: value$11 !== undefined ? decodeBN(Caml_option.valFromOption(value$11)) : Js_exn.raiseError("graphql_ppx: Field patronageNumerator on type Wildcard is missing"),
        patronageNumeratorPriceScaled: value$12 !== undefined ? decodeBN(Caml_option.valFromOption(value$12)) : Js_exn.raiseError("graphql_ppx: Field patronageNumeratorPriceScaled on type Wildcard is missing"),
        timeCollected: value$13 !== undefined ? decodeBN(Caml_option.valFromOption(value$13)) : Js_exn.raiseError("graphql_ppx: Field timeCollected on type Wildcard is missing"),
        price: tmp$2,
        owner: tmp$4
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          wildcard: tmp
        };
}

function make$1(tokenId, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([/* tuple */[
                    "tokenId",
                    tokenId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var tokenId = variables.tokenId;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([/* tuple */[
                    "tokenId",
                    tokenId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(tokenId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "tokenId",
                  tokenId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, tokenId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "tokenId",
                      tokenId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var SubWildcardQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

var ppx_printed_query$2 = "subscription   {\nstateChanges(first: 1, orderBy: timestamp, orderDirection: desc)  {\nid  \ntimestamp  \ntxEventList  \nwildcardChanges  {\nid  \ntokenId  \ntimeAcquired  \ntotalCollected  \npatronageNumeratorPriceScaled  \ntimeCollected  \nprice  {\nid  \nprice  \n}\n\nowner  {\naddress  \nid  \n}\n\n}\n\npatronChanges  {\nid  \naddress  \nlastUpdated  \npreviouslyOwnedTokens  {\nid  \n}\n\ntokens  {\nid  \n}\n\navailableDeposit  \npatronTokenCostScaledNumerator  \nforeclosureTime  \n}\n\n}\n\n}\n";

function parse$2(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "stateChanges");
  return {
          stateChanges: value$2 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(value$2))).map((function (value) {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var value$2 = Js_dict.get(value$1, "id");
                    var tmp;
                    if (value$2 !== undefined) {
                      var value$3 = Caml_option.valFromOption(value$2);
                      var value$4 = Js_json.decodeString(value$3);
                      tmp = value$4 !== undefined ? value$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type StateChange is missing");
                    }
                    var value$5 = Js_dict.get(value$1, "timestamp");
                    var value$6 = Js_dict.get(value$1, "txEventList");
                    var value$7 = Js_dict.get(value$1, "wildcardChanges");
                    var value$8 = Js_dict.get(value$1, "patronChanges");
                    return {
                            id: tmp,
                            timestamp: value$5 !== undefined ? Caml_option.valFromOption(value$5) : Js_exn.raiseError("graphql_ppx: Field timestamp on type StateChange is missing"),
                            txEventList: value$6 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(value$6))).map((function (value) {
                                      var value$1 = Js_json.decodeString(value);
                                      if (value$1 !== undefined) {
                                        return value$1;
                                      } else {
                                        return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                                      }
                                    })) : Js_exn.raiseError("graphql_ppx: Field txEventList on type StateChange is missing"),
                            wildcardChanges: value$7 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(value$7))).map((function (value) {
                                      var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                      var value$2 = Js_dict.get(value$1, "id");
                                      var tmp;
                                      if (value$2 !== undefined) {
                                        var value$3 = Caml_option.valFromOption(value$2);
                                        var value$4 = Js_json.decodeString(value$3);
                                        tmp = value$4 !== undefined ? value$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                      } else {
                                        tmp = Js_exn.raiseError("graphql_ppx: Field id on type Wildcard is missing");
                                      }
                                      var value$5 = Js_dict.get(value$1, "tokenId");
                                      var value$6 = Js_dict.get(value$1, "timeAcquired");
                                      var value$7 = Js_dict.get(value$1, "totalCollected");
                                      var value$8 = Js_dict.get(value$1, "patronageNumeratorPriceScaled");
                                      var value$9 = Js_dict.get(value$1, "timeCollected");
                                      var value$10 = Js_dict.get(value$1, "price");
                                      var tmp$1;
                                      if (value$10 !== undefined) {
                                        var value$11 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(value$10)));
                                        var value$12 = Js_dict.get(value$11, "id");
                                        var tmp$2;
                                        if (value$12 !== undefined) {
                                          var value$13 = Caml_option.valFromOption(value$12);
                                          var value$14 = Js_json.decodeString(value$13);
                                          tmp$2 = value$14 !== undefined ? value$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$13));
                                        } else {
                                          tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type Price is missing");
                                        }
                                        var value$15 = Js_dict.get(value$11, "price");
                                        tmp$1 = {
                                          id: tmp$2,
                                          price: value$15 !== undefined ? Caml_option.valFromOption(value$15) : Js_exn.raiseError("graphql_ppx: Field price on type Price is missing")
                                        };
                                      } else {
                                        tmp$1 = Js_exn.raiseError("graphql_ppx: Field price on type Wildcard is missing");
                                      }
                                      var value$16 = Js_dict.get(value$1, "owner");
                                      var tmp$3;
                                      if (value$16 !== undefined) {
                                        var value$17 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(value$16)));
                                        var value$18 = Js_dict.get(value$17, "address");
                                        var value$19 = Js_dict.get(value$17, "id");
                                        var tmp$4;
                                        if (value$19 !== undefined) {
                                          var value$20 = Caml_option.valFromOption(value$19);
                                          var value$21 = Js_json.decodeString(value$20);
                                          tmp$4 = value$21 !== undefined ? value$21 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$20));
                                        } else {
                                          tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type Patron is missing");
                                        }
                                        tmp$3 = {
                                          address: value$18 !== undefined ? Caml_option.valFromOption(value$18) : Js_exn.raiseError("graphql_ppx: Field address on type Patron is missing"),
                                          id: tmp$4
                                        };
                                      } else {
                                        tmp$3 = Js_exn.raiseError("graphql_ppx: Field owner on type Wildcard is missing");
                                      }
                                      return {
                                              id: tmp,
                                              tokenId: value$5 !== undefined ? Caml_option.valFromOption(value$5) : Js_exn.raiseError("graphql_ppx: Field tokenId on type Wildcard is missing"),
                                              timeAcquired: value$6 !== undefined ? Caml_option.valFromOption(value$6) : Js_exn.raiseError("graphql_ppx: Field timeAcquired on type Wildcard is missing"),
                                              totalCollected: value$7 !== undefined ? Caml_option.valFromOption(value$7) : Js_exn.raiseError("graphql_ppx: Field totalCollected on type Wildcard is missing"),
                                              patronageNumeratorPriceScaled: value$8 !== undefined ? Caml_option.valFromOption(value$8) : Js_exn.raiseError("graphql_ppx: Field patronageNumeratorPriceScaled on type Wildcard is missing"),
                                              timeCollected: value$9 !== undefined ? Caml_option.valFromOption(value$9) : Js_exn.raiseError("graphql_ppx: Field timeCollected on type Wildcard is missing"),
                                              price: tmp$1,
                                              owner: tmp$3
                                            };
                                    })) : Js_exn.raiseError("graphql_ppx: Field wildcardChanges on type StateChange is missing"),
                            patronChanges: value$8 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(value$8))).map((function (value) {
                                      var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                      var value$2 = Js_dict.get(value$1, "id");
                                      var tmp;
                                      if (value$2 !== undefined) {
                                        var value$3 = Caml_option.valFromOption(value$2);
                                        var value$4 = Js_json.decodeString(value$3);
                                        tmp = value$4 !== undefined ? value$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                      } else {
                                        tmp = Js_exn.raiseError("graphql_ppx: Field id on type Patron is missing");
                                      }
                                      var value$5 = Js_dict.get(value$1, "address");
                                      var value$6 = Js_dict.get(value$1, "lastUpdated");
                                      var value$7 = Js_dict.get(value$1, "previouslyOwnedTokens");
                                      var value$8 = Js_dict.get(value$1, "tokens");
                                      var value$9 = Js_dict.get(value$1, "availableDeposit");
                                      var value$10 = Js_dict.get(value$1, "patronTokenCostScaledNumerator");
                                      var value$11 = Js_dict.get(value$1, "foreclosureTime");
                                      return {
                                              id: tmp,
                                              address: value$5 !== undefined ? Caml_option.valFromOption(value$5) : Js_exn.raiseError("graphql_ppx: Field address on type Patron is missing"),
                                              lastUpdated: value$6 !== undefined ? Caml_option.valFromOption(value$6) : Js_exn.raiseError("graphql_ppx: Field lastUpdated on type Patron is missing"),
                                              previouslyOwnedTokens: value$7 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(value$7))).map((function (value) {
                                                        var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                                        var value$2 = Js_dict.get(value$1, "id");
                                                        var tmp;
                                                        if (value$2 !== undefined) {
                                                          var value$3 = Caml_option.valFromOption(value$2);
                                                          var value$4 = Js_json.decodeString(value$3);
                                                          tmp = value$4 !== undefined ? value$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                                        } else {
                                                          tmp = Js_exn.raiseError("graphql_ppx: Field id on type Wildcard is missing");
                                                        }
                                                        return {
                                                                id: tmp
                                                              };
                                                      })) : Js_exn.raiseError("graphql_ppx: Field previouslyOwnedTokens on type Patron is missing"),
                                              tokens: value$8 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(value$8))).map((function (value) {
                                                        var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                                        var value$2 = Js_dict.get(value$1, "id");
                                                        var tmp;
                                                        if (value$2 !== undefined) {
                                                          var value$3 = Caml_option.valFromOption(value$2);
                                                          var value$4 = Js_json.decodeString(value$3);
                                                          tmp = value$4 !== undefined ? value$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                                        } else {
                                                          tmp = Js_exn.raiseError("graphql_ppx: Field id on type Wildcard is missing");
                                                        }
                                                        return {
                                                                id: tmp
                                                              };
                                                      })) : Js_exn.raiseError("graphql_ppx: Field tokens on type Patron is missing"),
                                              availableDeposit: value$9 !== undefined ? Caml_option.valFromOption(value$9) : Js_exn.raiseError("graphql_ppx: Field availableDeposit on type Patron is missing"),
                                              patronTokenCostScaledNumerator: value$10 !== undefined ? Caml_option.valFromOption(value$10) : Js_exn.raiseError("graphql_ppx: Field patronTokenCostScaledNumerator on type Patron is missing"),
                                              foreclosureTime: value$11 !== undefined ? Caml_option.valFromOption(value$11) : Js_exn.raiseError("graphql_ppx: Field foreclosureTime on type Patron is missing")
                                            };
                                    })) : Js_exn.raiseError("graphql_ppx: Field patronChanges on type StateChange is missing")
                          };
                  })) : Js_exn.raiseError("graphql_ppx: Field stateChanges on type Subscription is missing")
        };
}

function make$2(param) {
  return {
          query: ppx_printed_query$2,
          variables: null,
          parse: parse$2
        };
}

function makeWithVariables$2(param) {
  return {
          query: ppx_printed_query$2,
          variables: null,
          parse: parse$2
        };
}

function makeVariables$2(param) {
  return null;
}

function definition_002$2(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$2 = /* tuple */[
  parse$2,
  ppx_printed_query$2,
  definition_002$2
];

function ret_type$2(f) {
  return { };
}

var MT_Ret$2 = { };

var SubStateChangeEvents = {
  ppx_printed_query: ppx_printed_query$2,
  query: ppx_printed_query$2,
  parse: parse$2,
  make: make$2,
  makeWithVariables: makeWithVariables$2,
  makeVariables: makeVariables$2,
  definition: definition$2,
  ret_type: ret_type$2,
  MT_Ret: MT_Ret$2
};

var ppx_printed_query$3 = "query ($patronId: String!)  {\npatron(id: $patronId)  {\nid  \naddress  \nlastUpdated  \npreviouslyOwnedTokens  {\nid  \n}\n\ntokens  {\nid  \n}\n\navailableDeposit  \npatronTokenCostScaledNumerator  \nforeclosureTime  \n}\n\n}\n";

function parse$3(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "patron");
  var tmp;
  if (value$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(value$2);
    var match = Js_json.decodeNull(value$3);
    if (match !== undefined) {
      tmp = undefined;
    } else {
      var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
      var value$5 = Js_dict.get(value$4, "id");
      var tmp$1;
      if (value$5 !== undefined) {
        var value$6 = Caml_option.valFromOption(value$5);
        var value$7 = Js_json.decodeString(value$6);
        tmp$1 = value$7 !== undefined ? value$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Patron is missing");
      }
      var value$8 = Js_dict.get(value$4, "address");
      var value$9 = Js_dict.get(value$4, "lastUpdated");
      var value$10 = Js_dict.get(value$4, "previouslyOwnedTokens");
      var value$11 = Js_dict.get(value$4, "tokens");
      var value$12 = Js_dict.get(value$4, "availableDeposit");
      var value$13 = Js_dict.get(value$4, "patronTokenCostScaledNumerator");
      var value$14 = Js_dict.get(value$4, "foreclosureTime");
      tmp = {
        id: tmp$1,
        address: value$8 !== undefined ? decodeAddress(Caml_option.valFromOption(value$8)) : Js_exn.raiseError("graphql_ppx: Field address on type Patron is missing"),
        lastUpdated: value$9 !== undefined ? decodeBN(Caml_option.valFromOption(value$9)) : Js_exn.raiseError("graphql_ppx: Field lastUpdated on type Patron is missing"),
        previouslyOwnedTokens: value$10 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(value$10))).map((function (value) {
                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                  var value$2 = Js_dict.get(value$1, "id");
                  var tmp;
                  if (value$2 !== undefined) {
                    var value$3 = Caml_option.valFromOption(value$2);
                    var value$4 = Js_json.decodeString(value$3);
                    tmp = value$4 !== undefined ? value$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Wildcard is missing");
                  }
                  return {
                          id: tmp
                        };
                })) : Js_exn.raiseError("graphql_ppx: Field previouslyOwnedTokens on type Patron is missing"),
        tokens: value$11 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(value$11))).map((function (value) {
                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                  var value$2 = Js_dict.get(value$1, "id");
                  var tmp;
                  if (value$2 !== undefined) {
                    var value$3 = Caml_option.valFromOption(value$2);
                    var value$4 = Js_json.decodeString(value$3);
                    tmp = value$4 !== undefined ? value$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Wildcard is missing");
                  }
                  return {
                          id: tmp
                        };
                })) : Js_exn.raiseError("graphql_ppx: Field tokens on type Patron is missing"),
        availableDeposit: value$12 !== undefined ? decodePrice(Caml_option.valFromOption(value$12)) : Js_exn.raiseError("graphql_ppx: Field availableDeposit on type Patron is missing"),
        patronTokenCostScaledNumerator: value$13 !== undefined ? decodeBN(Caml_option.valFromOption(value$13)) : Js_exn.raiseError("graphql_ppx: Field patronTokenCostScaledNumerator on type Patron is missing"),
        foreclosureTime: value$14 !== undefined ? decodeMoment(Caml_option.valFromOption(value$14)) : Js_exn.raiseError("graphql_ppx: Field foreclosureTime on type Patron is missing")
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          patron: tmp
        };
}

function make$3(patronId, param) {
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray([/* tuple */[
                    "patronId",
                    patronId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeWithVariables$3(variables) {
  var patronId = variables.patronId;
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray([/* tuple */[
                    "patronId",
                    patronId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeVariables$3(patronId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "patronId",
                  patronId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$3(graphql_ppx_use_json_variables_fn, patronId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "patronId",
                      patronId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$3 = /* tuple */[
  parse$3,
  ppx_printed_query$3,
  definition_002$3
];

function ret_type$3(f) {
  return { };
}

var MT_Ret$3 = { };

var LoadPatron = {
  ppx_printed_query: ppx_printed_query$3,
  query: ppx_printed_query$3,
  parse: parse$3,
  make: make$3,
  makeWithVariables: makeWithVariables$3,
  makeVariables: makeVariables$3,
  definition: definition$3,
  ret_type: ret_type$3,
  MT_Ret: MT_Ret$3
};

var ppx_printed_query$4 = "query ($patronId: String!)  {\npatronNew(id: $patronId)  {\nid  \naddress  \nlastUpdated  \ntotalLoyaltyTokens  \ntotalLoyaltyTokensIncludingUnRedeemed  \n}\n\n}\n";

function parse$4(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "patronNew");
  var tmp;
  if (value$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(value$2);
    var match = Js_json.decodeNull(value$3);
    if (match !== undefined) {
      tmp = undefined;
    } else {
      var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
      var value$5 = Js_dict.get(value$4, "id");
      var tmp$1;
      if (value$5 !== undefined) {
        var value$6 = Caml_option.valFromOption(value$5);
        var value$7 = Js_json.decodeString(value$6);
        tmp$1 = value$7 !== undefined ? value$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type PatronNew is missing");
      }
      var value$8 = Js_dict.get(value$4, "address");
      var value$9 = Js_dict.get(value$4, "lastUpdated");
      var value$10 = Js_dict.get(value$4, "totalLoyaltyTokens");
      var value$11 = Js_dict.get(value$4, "totalLoyaltyTokensIncludingUnRedeemed");
      tmp = {
        id: tmp$1,
        address: value$8 !== undefined ? decodeAddress(Caml_option.valFromOption(value$8)) : Js_exn.raiseError("graphql_ppx: Field address on type PatronNew is missing"),
        lastUpdated: value$9 !== undefined ? decodeBN(Caml_option.valFromOption(value$9)) : Js_exn.raiseError("graphql_ppx: Field lastUpdated on type PatronNew is missing"),
        totalLoyaltyTokens: value$10 !== undefined ? decodeBN(Caml_option.valFromOption(value$10)) : Js_exn.raiseError("graphql_ppx: Field totalLoyaltyTokens on type PatronNew is missing"),
        totalLoyaltyTokensIncludingUnRedeemed: value$11 !== undefined ? decodeBN(Caml_option.valFromOption(value$11)) : Js_exn.raiseError("graphql_ppx: Field totalLoyaltyTokensIncludingUnRedeemed on type PatronNew is missing")
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          patronNew: tmp
        };
}

function make$4(patronId, param) {
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray([/* tuple */[
                    "patronId",
                    patronId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$4
        };
}

function makeWithVariables$4(variables) {
  var patronId = variables.patronId;
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray([/* tuple */[
                    "patronId",
                    patronId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$4
        };
}

function makeVariables$4(patronId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "patronId",
                  patronId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$4(graphql_ppx_use_json_variables_fn, patronId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "patronId",
                      patronId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$4 = /* tuple */[
  parse$4,
  ppx_printed_query$4,
  definition_002$4
];

function ret_type$4(f) {
  return { };
}

var MT_Ret$4 = { };

var LoadPatronNew = {
  ppx_printed_query: ppx_printed_query$4,
  query: ppx_printed_query$4,
  parse: parse$4,
  make: make$4,
  makeWithVariables: makeWithVariables$4,
  makeVariables: makeVariables$4,
  definition: definition$4,
  ret_type: ret_type$4,
  MT_Ret: MT_Ret$4
};

var ppx_printed_query$5 = "query ($patronId: String!)  {\npatronNew(id: $patronId)  {\nid  \naddress  \nlastUpdated  \ntotalLoyaltyTokens  \ntotalLoyaltyTokensIncludingUnRedeemed  \n}\n\n}\n";

function parse$5(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "patronNew");
  var tmp;
  if (value$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(value$2);
    var match = Js_json.decodeNull(value$3);
    if (match !== undefined) {
      tmp = undefined;
    } else {
      var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
      var value$5 = Js_dict.get(value$4, "id");
      var tmp$1;
      if (value$5 !== undefined) {
        var value$6 = Caml_option.valFromOption(value$5);
        var value$7 = Js_json.decodeString(value$6);
        tmp$1 = value$7 !== undefined ? value$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type PatronNew is missing");
      }
      var value$8 = Js_dict.get(value$4, "address");
      var value$9 = Js_dict.get(value$4, "lastUpdated");
      var value$10 = Js_dict.get(value$4, "totalLoyaltyTokens");
      var value$11 = Js_dict.get(value$4, "totalLoyaltyTokensIncludingUnRedeemed");
      tmp = {
        id: tmp$1,
        address: value$8 !== undefined ? Caml_option.valFromOption(value$8) : Js_exn.raiseError("graphql_ppx: Field address on type PatronNew is missing"),
        lastUpdated: value$9 !== undefined ? Caml_option.valFromOption(value$9) : Js_exn.raiseError("graphql_ppx: Field lastUpdated on type PatronNew is missing"),
        totalLoyaltyTokens: value$10 !== undefined ? Caml_option.valFromOption(value$10) : Js_exn.raiseError("graphql_ppx: Field totalLoyaltyTokens on type PatronNew is missing"),
        totalLoyaltyTokensIncludingUnRedeemed: value$11 !== undefined ? Caml_option.valFromOption(value$11) : Js_exn.raiseError("graphql_ppx: Field totalLoyaltyTokensIncludingUnRedeemed on type PatronNew is missing")
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          patronNew: tmp
        };
}

function make$5(patronId, param) {
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray([/* tuple */[
                    "patronId",
                    patronId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$5
        };
}

function makeWithVariables$5(variables) {
  var patronId = variables.patronId;
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray([/* tuple */[
                    "patronId",
                    patronId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$5
        };
}

function makeVariables$5(patronId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "patronId",
                  patronId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$5(graphql_ppx_use_json_variables_fn, patronId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "patronId",
                      patronId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$5 = /* tuple */[
  parse$5,
  ppx_printed_query$5,
  definition_002$5
];

function ret_type$5(f) {
  return { };
}

var MT_Ret$5 = { };

var LoadPatronNewNoDecode = {
  ppx_printed_query: ppx_printed_query$5,
  query: ppx_printed_query$5,
  parse: parse$5,
  make: make$5,
  makeWithVariables: makeWithVariables$5,
  makeVariables: makeVariables$5,
  definition: definition$5,
  ret_type: ret_type$5,
  MT_Ret: MT_Ret$5
};

var ppx_printed_query$6 = "query ($numberOfLeaders: Int!)  {\npatrons(first: $numberOfLeaders, orderBy: patronTokenCostScaledNumerator, orderDirection: desc)  {\nid  \npatronTokenCostScaledNumerator  \n}\n\n}\n";

function parse$6(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "patrons");
  return {
          patrons: value$2 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(value$2))).map((function (value) {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var value$2 = Js_dict.get(value$1, "id");
                    var tmp;
                    if (value$2 !== undefined) {
                      var value$3 = Caml_option.valFromOption(value$2);
                      var value$4 = Js_json.decodeString(value$3);
                      tmp = value$4 !== undefined ? value$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type Patron is missing");
                    }
                    var value$5 = Js_dict.get(value$1, "patronTokenCostScaledNumerator");
                    return {
                            id: tmp,
                            patronTokenCostScaledNumerator: value$5 !== undefined ? decodeBN(Caml_option.valFromOption(value$5)) : Js_exn.raiseError("graphql_ppx: Field patronTokenCostScaledNumerator on type Patron is missing")
                          };
                  })) : Js_exn.raiseError("graphql_ppx: Field patrons on type Query is missing")
        };
}

function make$6(numberOfLeaders, param) {
  return {
          query: ppx_printed_query$6,
          variables: Js_dict.fromArray([/* tuple */[
                    "numberOfLeaders",
                    numberOfLeaders
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$6
        };
}

function makeWithVariables$6(variables) {
  var numberOfLeaders = variables.numberOfLeaders;
  return {
          query: ppx_printed_query$6,
          variables: Js_dict.fromArray([/* tuple */[
                    "numberOfLeaders",
                    numberOfLeaders
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$6
        };
}

function makeVariables$6(numberOfLeaders, param) {
  return Js_dict.fromArray([/* tuple */[
                  "numberOfLeaders",
                  numberOfLeaders
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$6(graphql_ppx_use_json_variables_fn, numberOfLeaders, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "numberOfLeaders",
                      numberOfLeaders
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$6 = /* tuple */[
  parse$6,
  ppx_printed_query$6,
  definition_002$6
];

function ret_type$6(f) {
  return { };
}

var MT_Ret$6 = { };

var LoadTopContributors = {
  ppx_printed_query: ppx_printed_query$6,
  query: ppx_printed_query$6,
  parse: parse$6,
  make: make$6,
  makeWithVariables: makeWithVariables$6,
  makeVariables: makeVariables$6,
  definition: definition$6,
  ret_type: ret_type$6,
  MT_Ret: MT_Ret$6
};

var ppx_printed_query$7 = "query   {\nglobal(id: 1)  {\nid  \ntotalCollectedOrDueAccurate  \ntimeLastCollected  \ntotalTokenCostScaledNumeratorAccurate  \n}\n\n}\n";

function parse$7(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "global");
  var tmp;
  if (value$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(value$2);
    var match = Js_json.decodeNull(value$3);
    if (match !== undefined) {
      tmp = undefined;
    } else {
      var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
      var value$5 = Js_dict.get(value$4, "id");
      var tmp$1;
      if (value$5 !== undefined) {
        var value$6 = Caml_option.valFromOption(value$5);
        var value$7 = Js_json.decodeString(value$6);
        tmp$1 = value$7 !== undefined ? value$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Global is missing");
      }
      var value$8 = Js_dict.get(value$4, "totalCollectedOrDueAccurate");
      var value$9 = Js_dict.get(value$4, "timeLastCollected");
      var value$10 = Js_dict.get(value$4, "totalTokenCostScaledNumeratorAccurate");
      tmp = {
        id: tmp$1,
        totalCollectedOrDueAccurate: value$8 !== undefined ? decodeBN(Caml_option.valFromOption(value$8)) : Js_exn.raiseError("graphql_ppx: Field totalCollectedOrDueAccurate on type Global is missing"),
        timeLastCollected: value$9 !== undefined ? decodeBN(Caml_option.valFromOption(value$9)) : Js_exn.raiseError("graphql_ppx: Field timeLastCollected on type Global is missing"),
        totalTokenCostScaledNumeratorAccurate: value$10 !== undefined ? decodeBN(Caml_option.valFromOption(value$10)) : Js_exn.raiseError("graphql_ppx: Field totalTokenCostScaledNumeratorAccurate on type Global is missing")
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          global: tmp
        };
}

function make$7(param) {
  return {
          query: ppx_printed_query$7,
          variables: null,
          parse: parse$7
        };
}

function makeWithVariables$7(param) {
  return {
          query: ppx_printed_query$7,
          variables: null,
          parse: parse$7
        };
}

function makeVariables$7(param) {
  return null;
}

function definition_002$7(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$7 = /* tuple */[
  parse$7,
  ppx_printed_query$7,
  definition_002$7
];

function ret_type$7(f) {
  return { };
}

var MT_Ret$7 = { };

var SubTotalRaisedOrDueQuery = {
  ppx_printed_query: ppx_printed_query$7,
  query: ppx_printed_query$7,
  parse: parse$7,
  make: make$7,
  makeWithVariables: makeWithVariables$7,
  makeVariables: makeVariables$7,
  definition: definition$7,
  ret_type: ret_type$7,
  MT_Ret: MT_Ret$7
};

function subscriptionResultOptionMap(result, mapping) {
  if (typeof result === "number" || result.tag) {
    return ;
  } else {
    return Caml_option.some(Curry._1(mapping, result[0]));
  }
}

function subscriptionResultToOption(result) {
  return subscriptionResultOptionMap(result, (function (a) {
                return a;
              }));
}

function queryResultOptionMap(result, mapping) {
  if (typeof result === "number" || result.tag) {
    return ;
  } else {
    return Caml_option.some(Curry._1(mapping, result[0]));
  }
}

function queryResultOptionFlatMap(result, mapping) {
  if (typeof result === "number" || result.tag) {
    return ;
  } else {
    return Curry._1(mapping, result[0]);
  }
}

function queryResultToOption(result) {
  return queryResultOptionMap(result, (function (a) {
                return a;
              }));
}

function useWildcardQuery(tokenId) {
  return ApolloHooks$ReasonApolloHooks.useQuery(undefined, Caml_option.some(make$1(TokenId$WildCards.toString(tokenId), undefined).variables), undefined, undefined, undefined, undefined, undefined, undefined, definition$1);
}

function useStateChangeSubscription(param) {
  return ApolloHooks$ReasonApolloHooks.useSubscription(Caml_option.some(make$2(undefined).variables), undefined, undefined, definition$2);
}

function useStateChangeSubscriptionData(param) {
  var match = useStateChangeSubscription(undefined);
  return subscriptionResultOptionMap(match[0], (function (a) {
                return a;
              }));
}

function usePatron(animal) {
  var match = useWildcardQuery(animal);
  var getAddress = function (response) {
    return Belt_Option.flatMap(response.wildcard, (function (wildcard) {
                  return Caml_option.some(wildcard.owner.address);
                }));
  };
  return queryResultOptionFlatMap(match[0], getAddress);
}

function useTimeAcquired(animal) {
  var match = useWildcardQuery(animal);
  var getTimeAquired = function (response) {
    return Belt_Option.mapWithDefault(response.wildcard, Moment(), (function (wildcard) {
                  return wildcard.timeAcquired;
                }));
  };
  return queryResultOptionMap(match[0], getTimeAquired);
}

function useQueryPatron(patron) {
  return ApolloHooks$ReasonApolloHooks.useQuery(undefined, Caml_option.some(make$3(patron, undefined).variables), undefined, undefined, undefined, undefined, undefined, undefined, definition$3);
}

function useQueryPatronNew(patron) {
  return ApolloHooks$ReasonApolloHooks.useQuery(undefined, Caml_option.some(make$4(patron, undefined).variables), undefined, undefined, undefined, undefined, undefined, undefined, definition$4);
}

function useForeclosureTime(patron) {
  var match = useQueryPatron(patron);
  var getForclosureTime = function (response) {
    return Belt_Option.map(response.patron, (function (patron) {
                  return patron.foreclosureTime;
                }));
  };
  return queryResultOptionFlatMap(match[0], getForclosureTime);
}

function usePatronQuery(patron) {
  var match = useQueryPatron(patron);
  return queryResultOptionMap(match[0], (function (a) {
                return a;
              }));
}

function useTimeAcquiredWithDefault(animal, $$default) {
  return Globals$WildCards.$pipe$pipe$pipe$pipe(useTimeAcquired(animal), $$default);
}

function useDaysHeld(tokenId) {
  return Globals$WildCards.oMap(useTimeAcquired(tokenId), (function (moment) {
                return /* tuple */[
                        Moment().diff(moment, "days"),
                        moment
                      ];
              }));
}

function useTotalCollectedOrDue(param) {
  var match = ApolloHooks$ReasonApolloHooks.useQuery(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, definition$7);
  var getTotalCollected = function (response) {
    return Globals$WildCards.oMap(response.global, (function ($$global) {
                  return /* tuple */[
                          $$global.totalCollectedOrDueAccurate,
                          $$global.timeLastCollected,
                          $$global.totalTokenCostScaledNumeratorAccurate
                        ];
                }));
  };
  return queryResultOptionFlatMap(match[0], getTotalCollected);
}

function getCurrentTimestamp(param) {
  return String(Js_math.floor(Date.now() / 1000));
}

function useCurrentTime(param) {
  var match = React.useState((function () {
          return getCurrentTimestamp(undefined);
        }));
  var setTimeLeft = match[1];
  React.useEffect((function () {
          var interval = setInterval((function (param) {
                  return Curry._1(setTimeLeft, (function (param) {
                                return getCurrentTimestamp(undefined);
                              }));
                }), 2000);
          return (function (param) {
                    clearInterval(interval);
                    
                  });
        }), [setTimeLeft]);
  return match[0];
}

function useAmountRaised(param) {
  var currentTimestamp = useCurrentTime(undefined);
  return Globals$WildCards.oMap(useTotalCollectedOrDue(undefined), (function (param) {
                var timeElapsed = new BnJs.default(currentTimestamp).sub(param[1]);
                var amountRaisedSinceLastCollection = param[2].mul(timeElapsed).div(new BnJs.default("31536000000000000000"));
                return param[0].add(amountRaisedSinceLastCollection);
              }));
}

function useTotalCollectedToken(animal) {
  var match = useWildcardQuery(animal);
  var getTotalCollectedData = function (response) {
    return Globals$WildCards.oMap(response.wildcard, (function (wc) {
                  return /* tuple */[
                          wc.totalCollected,
                          wc.timeCollected,
                          wc.patronageNumeratorPriceScaled
                        ];
                }));
  };
  return queryResultOptionFlatMap(match[0], getTotalCollectedData);
}

function usePatronageNumerator(tokenId) {
  var match = useWildcardQuery(tokenId);
  var patronageNumerator = function (response) {
    return Belt_Option.map(response.wildcard, (function (wildcard) {
                  return wildcard.patronageNumerator;
                }));
  };
  return queryResultOptionFlatMap(match[0], patronageNumerator);
}

function usePledgeRate(tokenId) {
  var optPatronageNumerator = usePatronageNumerator(tokenId);
  return React.useMemo((function () {
                if (optPatronageNumerator === undefined) {
                  return 0;
                }
                var result = Globals$WildCards.$pipe$slash$pipe(Caml_option.valFromOption(optPatronageNumerator), new BnJs.default("12000000000"));
                return result.toNumber() / 1000;
              }), [optPatronageNumerator]);
}

function usePledgeRateDetailed(tokenId) {
  var pledgeRate = usePledgeRate(tokenId);
  var inversePledgeRate = 1 / pledgeRate;
  var numeratorOverYear = String(pledgeRate * 1200 | 0);
  return /* tuple */[
          numeratorOverYear,
          "100",
          pledgeRate,
          inversePledgeRate
        ];
}

function useAmountRaisedToken(animal) {
  var currentTimestamp = useCurrentTime(undefined);
  var match = useTotalCollectedToken(animal);
  if (match === undefined) {
    return ;
  }
  var timeElapsed = new BnJs.default(currentTimestamp).sub(match[1]);
  var amountRaisedSinceLastCollection = match[2].mul(timeElapsed).div(new BnJs.default("31536000000000000000"));
  return Caml_option.some(match[0].add(amountRaisedSinceLastCollection));
}

function useRemainingDeposit(patron) {
  var match = useQueryPatron(patron);
  var getRemainingDepositData = function (response) {
    return Globals$WildCards.oMap(response.patron, (function (wc) {
                  return /* tuple */[
                          wc.availableDeposit,
                          wc.lastUpdated,
                          wc.patronTokenCostScaledNumerator
                        ];
                }));
  };
  return queryResultOptionFlatMap(match[0], getRemainingDepositData);
}

function useRemainingDepositEth(patron) {
  var currentTimestamp = useCurrentTime(undefined);
  var match = useRemainingDeposit(patron);
  if (match === undefined) {
    return ;
  }
  var timeElapsed = new BnJs.default(currentTimestamp).sub(match[1]);
  var amountRaisedSinceLastCollection = match[2].mul(timeElapsed).div(new BnJs.default("31536000000000000000"));
  return Caml_option.some(match[0].sub(amountRaisedSinceLastCollection));
}

function usePrice(animal) {
  var match = useWildcardQuery(animal);
  var simple = match[0];
  var currentPatron = Belt_Option.mapWithDefault(usePatron(animal), "no-patron-defined", (function (a) {
          return a;
        }));
  var availableDeposit = useRemainingDepositEth(currentPatron);
  if (typeof simple === "number") {
    return /* Loading */1;
  }
  if (simple.tag) {
    return /* Loading */1;
  }
  var priceValue = Belt_Option.mapWithDefault(simple[0].wildcard, Eth$WildCards.makeFromInt(0), (function (wildcard) {
          return wildcard.price.price;
        }));
  if (availableDeposit !== undefined && Caml_option.valFromOption(availableDeposit).gt(new BnJs.default("0"))) {
    return /* Price */[priceValue];
  } else {
    return /* Foreclosed */0;
  }
}

export {
  tokenIdToAnimal ,
  decodePrice ,
  decodeMoment ,
  decodeBN ,
  decodeAddress ,
  InitialLoad ,
  useInitialDataLoad ,
  SubWildcardQuery ,
  SubStateChangeEvents ,
  LoadPatron ,
  LoadPatronNew ,
  LoadPatronNewNoDecode ,
  LoadTopContributors ,
  SubTotalRaisedOrDueQuery ,
  subscriptionResultOptionMap ,
  subscriptionResultToOption ,
  queryResultOptionMap ,
  queryResultOptionFlatMap ,
  queryResultToOption ,
  useWildcardQuery ,
  useStateChangeSubscription ,
  useStateChangeSubscriptionData ,
  usePatron ,
  useTimeAcquired ,
  useQueryPatron ,
  useQueryPatronNew ,
  useForeclosureTime ,
  usePatronQuery ,
  useTimeAcquiredWithDefault ,
  useDaysHeld ,
  useTotalCollectedOrDue ,
  getCurrentTimestamp ,
  useCurrentTime ,
  useAmountRaised ,
  useTotalCollectedToken ,
  usePatronageNumerator ,
  usePledgeRate ,
  usePledgeRateDetailed ,
  useAmountRaisedToken ,
  useRemainingDeposit ,
  useRemainingDepositEth ,
  usePrice ,
  
}
/* bn.js Not a pure module */
