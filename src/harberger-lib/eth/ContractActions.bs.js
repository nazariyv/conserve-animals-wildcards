// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as BnJs from "bn.js";
import * as React from "react";
import * as Ethers from "ethers";
import * as $$Promise from "reason-promise/src/js/promise.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Async$WildCards from "../Async.bs.js";
import * as Core from "@web3-react/core";
import * as Globals$WildCards from "../Globals.bs.js";
import * as TokenId$WildCards from "../TokenId.bs.js";
import * as RootProvider$WildCards from "../RootProvider.bs.js";
import * as LoyaltyTokenJson from "./abi/loyaltyToken.json";
import * as VoteContractJson from "./abi/voteContract.json";

function getProviderOrSigner(library, account) {
  if (account !== undefined) {
    return library.getSigner(account);
  } else {
    return library;
  }
}

var voteContract = VoteContractJson.voteContract;

var loyaltyTokenAbi = LoyaltyTokenJson.loyaltyToken;

function getExchangeContract(stewardAddress, stewardAbi, library, account) {
  return new Ethers.Contract(stewardAddress, stewardAbi, getProviderOrSigner(library, account));
}

function getLoyaltyTokenContract(stewardAddress, library, account) {
  return new Ethers.Contract(stewardAddress, loyaltyTokenAbi, getProviderOrSigner(library, account));
}

function getVotingContract(stewardAddress, library, account) {
  return new Ethers.Contract(stewardAddress, voteContract, getProviderOrSigner(library, account));
}

var stewardAddressMainnet = "0x6D47CF86F6A490c6410fC082Fd1Ad29CF61492d0";

var stewardAddressGoerli = "0x0C00CFE8EbB34fE7C31d4915a43Cde211e9F0F3B";

var loyaltyTokenAddressMainnet = "0x773c75c2277eD3e402BDEfd28Ec3b51A3AfbD8a4";

var loyaltyTokenAddressGoerli = "0xd7d8c42ab5b83aa3d4114e5297989dc27bdfb715";

function useStewardAbi(param) {
  var abi = RootProvider$WildCards.useStewardAbi(undefined);
  if (abi !== undefined) {
    return Caml_option.valFromOption(abi);
  } else {
    return (require("./abi/steward.json").stewardAbi);
  }
}

function defaultStewardAddressFromChainId(param) {
  if (param !== 1) {
    if (param !== 5) {
      return ;
    } else {
      return stewardAddressGoerli;
    }
  } else {
    return stewardAddressMainnet;
  }
}

function useStewardAddress(param) {
  var externallySetAddress = RootProvider$WildCards.useStewardContractAddress(undefined);
  return (function (chainId) {
      return Belt_Option.mapWithDefault(externallySetAddress, defaultStewardAddressFromChainId(chainId), (function (a) {
                    return a;
                  }));
    });
}

function loyaltyTokenAddressFromChainId(param) {
  if (param !== 1) {
    if (param !== 5) {
      return ;
    } else {
      return loyaltyTokenAddressGoerli;
    }
  } else {
    return loyaltyTokenAddressMainnet;
  }
}

function useStewardContract(param) {
  var context = Core.useWeb3React();
  var stewardContractAddress = useStewardAddress(undefined);
  var stewardAbi = useStewardAbi(undefined);
  return React.useMemo((function () {
                var match = context.library;
                var match$1 = context.chainId;
                if (match !== undefined && match$1 !== undefined) {
                  return Globals$WildCards.oMap(Curry._1(stewardContractAddress, match$1), (function (__x) {
                                return getExchangeContract(__x, stewardAbi, match, context.account);
                              }));
                }
                
              }), /* tuple */[
              context.library,
              context.account,
              context.chainId
            ]);
}

function useLoyaltyTokenContract(param) {
  var context = Core.useWeb3React();
  return React.useMemo((function () {
                var match = context.library;
                var match$1 = context.chainId;
                if (match !== undefined && match$1 !== undefined) {
                  return Globals$WildCards.oMap(loyaltyTokenAddressFromChainId(match$1), (function (__x) {
                                return getLoyaltyTokenContract(__x, match, context.account);
                              }));
                }
                
              }), /* tuple */[
              context.library,
              context.account,
              context.chainId
            ]);
}

function useBuy(animal) {
  var animalId = TokenId$WildCards.toString(animal);
  var match = React.useState((function () {
          return /* UnInitialised */0;
        }));
  var setTxState = match[1];
  var optSteward = useStewardContract(undefined);
  return /* tuple */[
          (function (newPrice, deposit, value) {
              var newPriceEncoded = Ethers.utils.parseUnits(newPrice, 18);
              console.log("BN.new_(value)->BN.toStringGet(.)");
              console.log(new BnJs.default(value).toString());
              console.log(new BnJs.default(newPrice).toString());
              console.log("BN.new_(value)->BN.toStringGet(.)");
              console.log(newPriceEncoded);
              console.log("BN.new_(value)->BN.toStringGet(.)");
              console.log(newPrice);
              var value$1 = Ethers.utils.parseUnits(value, 0);
              var depositEncoded = Ethers.utils.parseUnits(deposit, 18);
              Curry._1(setTxState, (function (param) {
                      return /* Created */1;
                    }));
              if (optSteward === undefined) {
                return ;
              }
              var buyPromise = $$Promise.Js.toResult(optSteward.buy(animalId, newPriceEncoded, depositEncoded, {
                        value: value$1
                      }));
              $$Promise.getOk(buyPromise, (function (tx) {
                      Curry._1(setTxState, (function (param) {
                              return /* SignedAndSubmitted */Block.__(0, [tx.hash]);
                            }));
                      var txMinedPromise = $$Promise.Js.toResult(tx.wait());
                      $$Promise.getOk(txMinedPromise, (function (txOutcome) {
                              console.log(txOutcome);
                              return Curry._1(setTxState, (function (param) {
                                            return /* Complete */Block.__(2, [txOutcome]);
                                          }));
                            }));
                      $$Promise.getError(txMinedPromise, (function (error) {
                              Curry._1(setTxState, (function (param) {
                                      return /* Failed */2;
                                    }));
                              console.log(error);
                              
                            }));
                      
                    }));
              $$Promise.getError(buyPromise, (function (error) {
                      return Curry._1(setTxState, (function (param) {
                                    return /* Declined */Block.__(1, [error.message]);
                                  }));
                    }));
              
            }),
          match[0]
        ];
}

function useRedeemLoyaltyTokens(animalId) {
  var match = React.useState((function () {
          return /* UnInitialised */0;
        }));
  var setTxState = match[1];
  var optSteward = useStewardContract(undefined);
  var buyFunction = function (param) {
    var value = Ethers.utils.parseUnits("0", 0);
    Curry._1(setTxState, (function (param) {
            return /* Created */1;
          }));
    if (optSteward === undefined) {
      return ;
    }
    var claimLoyaltyTokenPromise = $$Promise.Js.toResult(optSteward._collectPatronage(animalId, {
              value: value
            }));
    $$Promise.getOk(claimLoyaltyTokenPromise, (function (tx) {
            Curry._1(setTxState, (function (param) {
                    return /* SignedAndSubmitted */Block.__(0, [tx.hash]);
                  }));
            var txMinedPromise = $$Promise.Js.toResult(tx.wait());
            $$Promise.getOk(txMinedPromise, (function (txOutcome) {
                    console.log(txOutcome);
                    return Curry._1(setTxState, (function (param) {
                                  return /* Complete */Block.__(2, [txOutcome]);
                                }));
                  }));
            $$Promise.getError(txMinedPromise, (function (error) {
                    Curry._1(setTxState, (function (param) {
                            return /* Failed */2;
                          }));
                    console.log(error);
                    
                  }));
            
          }));
    $$Promise.getError(claimLoyaltyTokenPromise, (function (error) {
            return Curry._1(setTxState, (function (param) {
                          return /* Declined */Block.__(1, [error.message]);
                        }));
          }));
    
  };
  return /* tuple */[
          buyFunction,
          match[0]
        ];
}

function useUpdateDeposit(param) {
  var match = React.useState((function () {
          return /* UnInitialised */0;
        }));
  var setTxState = match[1];
  var optSteward = useStewardContract(undefined);
  return /* tuple */[
          (function (value) {
              var value$1 = Ethers.utils.parseUnits(value, 0);
              Curry._1(setTxState, (function (param) {
                      return /* Created */1;
                    }));
              if (optSteward === undefined) {
                return ;
              }
              var updateDepositPromise = $$Promise.Js.toResult(optSteward.depositWei({
                        value: value$1
                      }));
              $$Promise.getOk(updateDepositPromise, (function (tx) {
                      Curry._1(setTxState, (function (param) {
                              return /* SignedAndSubmitted */Block.__(0, [tx.hash]);
                            }));
                      var txMinedPromise = $$Promise.Js.toResult(tx.wait());
                      $$Promise.getOk(txMinedPromise, (function (txOutcome) {
                              return Curry._1(setTxState, (function (param) {
                                            return /* Complete */Block.__(2, [txOutcome]);
                                          }));
                            }));
                      $$Promise.getError(txMinedPromise, (function (_error) {
                              return Curry._1(setTxState, (function (param) {
                                            return /* Failed */2;
                                          }));
                            }));
                      
                    }));
              $$Promise.getError(updateDepositPromise, (function (error) {
                      console.log("error processing transaction: " + error.message);
                      
                    }));
              
            }),
          match[0]
        ];
}

function useWithdrawDeposit(param) {
  var match = React.useState((function () {
          return /* UnInitialised */0;
        }));
  var setTxState = match[1];
  var optSteward = useStewardContract(undefined);
  return /* tuple */[
          (function (amountToWithdraw) {
              var value = Ethers.utils.parseUnits("0", 0);
              console.log(amountToWithdraw + " is the amount I'm trying to withdraw");
              var amountToWithdrawEncoded = Ethers.utils.parseUnits(amountToWithdraw, 0);
              Curry._1(setTxState, (function (param) {
                      return /* Created */1;
                    }));
              if (optSteward === undefined) {
                return ;
              }
              var updateDepositPromise = $$Promise.Js.toResult(optSteward.withdrawDeposit(amountToWithdrawEncoded, {
                        value: value
                      }));
              $$Promise.getOk(updateDepositPromise, (function (tx) {
                      Curry._1(setTxState, (function (param) {
                              return /* SignedAndSubmitted */Block.__(0, [tx.hash]);
                            }));
                      var txMinedPromise = $$Promise.Js.toResult(tx.wait());
                      $$Promise.getOk(txMinedPromise, (function (txOutcome) {
                              console.log(txOutcome);
                              return Curry._1(setTxState, (function (param) {
                                            return /* Complete */Block.__(2, [txOutcome]);
                                          }));
                            }));
                      $$Promise.getError(txMinedPromise, (function (error) {
                              Curry._1(setTxState, (function (param) {
                                      return /* Failed */2;
                                    }));
                              console.log(error);
                              
                            }));
                      
                    }));
              $$Promise.getError(updateDepositPromise, (function (error) {
                      return Curry._1(setTxState, (function (param) {
                                    return /* Declined */Block.__(1, [error.message]);
                                  }));
                    }));
              
            }),
          match[0]
        ];
}

function useUserLoyaltyTokenBalance(address) {
  var match = React.useState((function () {
          
        }));
  var setResult = match[1];
  var match$1 = React.useState((function () {
          return 0;
        }));
  var setCounter = match$1[1];
  var counter = match$1[0];
  var optSteward = useLoyaltyTokenContract(undefined);
  React.useEffect((function () {
          if (optSteward !== undefined) {
            Async$WildCards.let_(optSteward.balanceOf(address), (function (balance) {
                    var balanceString = balance.toString();
                    Curry._1(setResult, (function (param) {
                            return Caml_option.some(new BnJs.default(balanceString));
                          }));
                    return Globals$WildCards.async(undefined);
                  }));
          }
          
        }), /* tuple */[
        counter,
        setResult,
        optSteward,
        address
      ]);
  return /* tuple */[
          match[0],
          (function (param) {
              return Curry._1(setCounter, (function (param) {
                            return counter + 1 | 0;
                          }));
            })
        ];
}

function useChangePrice(animal) {
  var animalId = TokenId$WildCards.toString(animal);
  var match = React.useState((function () {
          return /* UnInitialised */0;
        }));
  var setTxState = match[1];
  var optSteward = useStewardContract(undefined);
  return /* tuple */[
          (function (newPrice) {
              var value = Ethers.utils.parseUnits("0", 0);
              var newPriceEncoded = Ethers.utils.parseUnits(newPrice, 0);
              Curry._1(setTxState, (function (param) {
                      return /* Created */1;
                    }));
              if (optSteward === undefined) {
                return ;
              }
              var updatePricePromise = $$Promise.Js.toResult(optSteward.changePrice(animalId, newPriceEncoded, {
                        value: value
                      }));
              $$Promise.getOk(updatePricePromise, (function (tx) {
                      Curry._1(setTxState, (function (param) {
                              return /* SignedAndSubmitted */Block.__(0, [tx.hash]);
                            }));
                      var txMinedPromise = $$Promise.Js.toResult(tx.wait());
                      $$Promise.getOk(txMinedPromise, (function (txOutcome) {
                              console.log(txOutcome);
                              return Curry._1(setTxState, (function (param) {
                                            return /* Complete */Block.__(2, [txOutcome]);
                                          }));
                            }));
                      $$Promise.getError(txMinedPromise, (function (error) {
                              Curry._1(setTxState, (function (param) {
                                      return /* Failed */2;
                                    }));
                              console.log(error);
                              
                            }));
                      
                    }));
              $$Promise.getError(updatePricePromise, (function (error) {
                      return Curry._1(setTxState, (function (param) {
                                    return /* Declined */Block.__(1, [error.message]);
                                  }));
                    }));
              
            }),
          match[0]
        ];
}

export {
  getProviderOrSigner ,
  voteContract ,
  loyaltyTokenAbi ,
  getExchangeContract ,
  getLoyaltyTokenContract ,
  getVotingContract ,
  stewardAddressMainnet ,
  stewardAddressGoerli ,
  loyaltyTokenAddressMainnet ,
  loyaltyTokenAddressGoerli ,
  useStewardAbi ,
  defaultStewardAddressFromChainId ,
  useStewardAddress ,
  loyaltyTokenAddressFromChainId ,
  useStewardContract ,
  useLoyaltyTokenContract ,
  useBuy ,
  useRedeemLoyaltyTokens ,
  useUpdateDeposit ,
  useWithdrawDeposit ,
  useUserLoyaltyTokenBalance ,
  useChangePrice ,
  
}
/* voteContract Not a pure module */
