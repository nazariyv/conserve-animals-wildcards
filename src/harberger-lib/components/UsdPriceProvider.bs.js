// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Decco from "decco/src/Decco.js";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Float from "bs-platform/lib/es6/belt_Float.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Async$WildCards from "../Async.bs.js";
import * as Globals$WildCards from "../Globals.bs.js";

var context = React.createContext(undefined);

var make = context.Provider;

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var PriceProvider = {
  context: context,
  make: make,
  makeProps: makeProps
};

function c(param) {
  return param.c;
}

function price_encode(v) {
  return Js_dict.fromArray([/* tuple */[
                "c",
                Decco.arrayToJson(Decco.stringToJson, v.c)
              ]]);
}

function price_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.tag !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var c = Decco.arrayFromJson(Decco.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict[0], "c"), null));
  if (!c.tag) {
    return /* Ok */Block.__(0, [{
                c: c[0]
              }]);
  }
  var e = c[0];
  return /* Error */Block.__(1, [{
              path: ".c" + e.path,
              message: e.message,
              value: e.value
            }]);
}

function ethUsd(param) {
  return param.ethUsd;
}

function ethUsdPrice_encode(v) {
  return Js_dict.fromArray([/* tuple */[
                "XETHZUSD",
                Decco.optionToJson(price_encode, v.ethUsd)
              ]]);
}

function ethUsdPrice_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.tag !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var ethUsd = Decco.optionFromJson(price_decode, Belt_Option.getWithDefault(Js_dict.get(dict[0], "XETHZUSD"), null));
  if (!ethUsd.tag) {
    return /* Ok */Block.__(0, [{
                ethUsd: ethUsd[0]
              }]);
  }
  var e = ethUsd[0];
  return /* Error */Block.__(1, [{
              path: ".XETHZUSD" + e.path,
              message: e.message,
              value: e.value
            }]);
}

function result(param) {
  return param.result;
}

function krakenPriceResponse_encode(v) {
  return Js_dict.fromArray([/* tuple */[
                "result",
                Decco.optionToJson(ethUsdPrice_encode, v.result)
              ]]);
}

function krakenPriceResponse_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.tag !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var result = Decco.optionFromJson(ethUsdPrice_decode, Belt_Option.getWithDefault(Js_dict.get(dict[0], "result"), null));
  if (!result.tag) {
    return /* Ok */Block.__(0, [{
                result: result[0]
              }]);
  }
  var e = result[0];
  return /* Error */Block.__(1, [{
              path: ".result" + e.path,
              message: e.message,
              value: e.value
            }]);
}

function getPrice(param) {
  return Async$WildCards.let_(fetch("https://api.kraken.com/0/public/Ticker?pair=ETHUSD"), (function (result) {
                return Async$WildCards.let_(result.json(), (function (response) {
                              var krakenPriceObj = krakenPriceResponse_decode(response);
                              var tmp;
                              if (krakenPriceObj.tag) {
                                console.log(krakenPriceObj[0]);
                                tmp = undefined;
                              } else {
                                var getPriceFromArray = function (a) {
                                  return Belt_Array.get(a, 0);
                                };
                                tmp = Globals$WildCards.$great$great$eq(Globals$WildCards.$less$$great(Globals$WildCards.$great$great$eq(krakenPriceObj[0].result, ethUsd), c), getPriceFromArray);
                              }
                              return Globals$WildCards.async(tmp);
                            }));
              }));
}

function UsdPriceProvider(Props) {
  var children = Props.children;
  var match = React.useState((function () {
          
        }));
  var setEtherUsdPrice = match[1];
  var etherUsdPrice = match[0];
  React.useEffect((function () {
          if (etherUsdPrice === undefined) {
            Globals$WildCards.mapAsync(getPrice(undefined), (function (newPrice) {
                    return Curry._1(setEtherUsdPrice, (function (param) {
                                  return Globals$WildCards.$great$great$eq(newPrice, Belt_Float.fromString);
                                }));
                  }));
          }
          
        }), /* tuple */[
        setEtherUsdPrice,
        etherUsdPrice
      ]);
  return React.createElement(make, makeProps(etherUsdPrice, children, undefined));
}

function useUsdPrice(param) {
  return React.useContext(context);
}

var initialState = {
  usdPrice: undefined
};

var make$1 = UsdPriceProvider;

export {
  initialState ,
  PriceProvider ,
  c ,
  price_encode ,
  price_decode ,
  ethUsd ,
  ethUsdPrice_encode ,
  ethUsdPrice_decode ,
  result ,
  krakenPriceResponse_encode ,
  krakenPriceResponse_decode ,
  getPrice ,
  make$1 as make,
  useUsdPrice ,
  
}
/* context Not a pure module */
